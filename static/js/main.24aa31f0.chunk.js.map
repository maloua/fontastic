{"version":3,"sources":["components/Controls.tsx","components/Paragraph.tsx","components/H1.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["Controls","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showColorPicker","inherits","createClass","key","value","setState","attr","_this$props","handleChange","rest","objectWithoutProperties","objectSpread","defineProperty","_this2","_this$props2","fontSize","color","react_default","a","createElement","className","type","onChange","e","Number","target","onClick","toggleColorPicker","lib","hex","React","Component","Paragraph","apply","arguments","style","H1","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","h1","setH1","_useState3","_useState4","paragraph","setParagraph","Controls_Controls","assign","H1_H1","Paragraph_Paragraph","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24aa31f0.chunk.js","sourcesContent":["import React from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport { Style } from \"./../interfaces\";\n\ninterface State {\n  showColorPicker: boolean;\n}\n\ninterface Props extends Style {\n  handleChange: ((value: Style) => void);\n}\n\nexport class Controls extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      showColorPicker: false\n    };\n  }\n\n  toggleColorPicker() {\n    this.setState({ showColorPicker: !this.state.showColorPicker });\n  }\n\n  handleChange(attr: string, value: any) {\n    const { handleChange, ...rest } = this.props;\n    handleChange({ ...rest, [attr]: value } as Pick<Style, keyof Style>);\n  }\n\n  render() {\n    const { fontSize, color } = this.props;\n    return (\n      <div>\n        <div>\n          <label>Size</label>\n          <input\n            className=\"fontSize\"\n            type=\"number\"\n            value={fontSize}\n            onChange={e =>\n              this.handleChange(\"fontSize\", Number(e.target.value))\n            }\n          />\n        </div>\n\n        <div>\n          <label>Color</label>\n          <button\n            className=\"toggle-colorpicker\"\n            onClick={() => this.toggleColorPicker()}\n          >\n            Toggle colorpicker\n          </button>\n          {this.state.showColorPicker && (\n            <div className=\"colorpicker\">\n              <ChromePicker\n                color={color}\n                onChange={color => this.handleChange(\"color\", color.hex)}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Style } from \"../interfaces\";\n\nexport class Paragraph extends React.Component<Style, {}> {\n  render() {\n    return (\n      <div className=\"paragraph\">\n        <p style={{ ...this.props }}>\n          Pommy ipsum shepherd's pie full English breakast chips have a\n          butcher's at this therewith air one's dirty linen, unhand me sir Kate\n          and Will loo bugger driving a mini a cuppa. Alright geezer ever so bow\n          ties are cool have a gander yorkshire pudding give you a bell\n          slappers, picalilly Sonic Screwdriver at the boozer baffled see a man\n          about a dog flabbergasted, chin up bowler hat porky-pies River Song\n          got a lot of brass. Ey up bloody mary The Doctor black cab lass pork\n          dripping yorkshire mixture cotton on, in the jacksy bag egg's old boy\n          a cuppa shortbread spam fritters squirrel.\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Style } from \"../interfaces\";\n\nexport class H1 extends React.Component<Style, {}> {\n  render() {\n    return (\n      <div className=\"h1\">\n        <h1 style={{ ...this.props }}>Ey up bloody mary</h1>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { Controls, H1, Paragraph } from \"./components\";\nimport { Style } from \"./interfaces\";\nimport \"./App.css\";\n\nexport default () => {\n  const [h1, setH1] = useState<Style>({ fontSize: 26, color: \"blue\" });\n  const [paragraph, setParagraph] = useState<Style>({\n    fontSize: 16,\n    color: \"green\"\n  });\n\n  return (\n    <div>\n      <Controls {...h1} handleChange={setH1} />\n      <H1 {...h1} />\n\n      <Controls {...paragraph} handleChange={setParagraph} />\n      <Paragraph {...paragraph} />\n    </div>\n  );\n};\n"],"sourceRoot":""}