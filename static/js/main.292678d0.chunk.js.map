{"version":3,"sources":["components/Controls.tsx","components/Converter.tsx","components/Paragraph.tsx","components/H1.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["Controls","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","showColorPicker","inherits","createClass","key","value","setState","attr","_this$props","props","handleChange","style","objectSpread","defineProperty","_this2","_this$props$style","fontSize","color","react_default","a","createElement","className","type","onChange","e","Number","target","onClick","toggleColorPicker","lib","hex","React","Component","Converter","property","replace","toLowerCase","formatProperty","tag","properties","keys","Fragment","map","p","i","renderProperty","renderTag","Paragraph","H1","Boolean","window","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","h1","setH1","_useState3","_useState4","paragraph","setParagraph","Controls_Controls","H1_H1","Paragraph_Paragraph","Converter_Converter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.292678d0.chunk.js","sourcesContent":["import React from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport { Style } from \"./../interfaces\";\n\ninterface State {\n  showColorPicker: boolean;\n}\n\ninterface Props {\n  handleChange: ((value: Style) => void);\n  style: Style;\n}\n\nexport class Controls extends React.Component<Props, State> {\n  state = {\n    showColorPicker: false\n  };\n\n  toggleColorPicker() {\n    this.setState({ showColorPicker: !this.state.showColorPicker });\n  }\n\n  handleChange(attr: string, value: string | number) {\n    const { handleChange, style } = this.props;\n\n    handleChange({ ...style, [attr]: value });\n  }\n\n  render() {\n    const { fontSize, color } = this.props.style;\n\n    return (\n      <div>\n        <div>\n          <label>Size</label>\n          <input\n            className=\"fontSize\"\n            type=\"number\"\n            value={fontSize}\n            onChange={e =>\n              this.handleChange(\"fontSize\", Number(e.target.value))\n            }\n          />\n        </div>\n\n        <div>\n          <label>Color</label>\n          <button\n            className=\"toggle-colorpicker\"\n            onClick={() => this.toggleColorPicker()}\n          >\n            Toggle colorpicker\n          </button>\n          {this.state.showColorPicker && (\n            <div className=\"colorpicker\">\n              <ChromePicker\n                color={color}\n                onChange={color => this.handleChange(\"color\", color.hex)}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Style } from \"./../interfaces\";\n\nexport class Converter extends React.Component<{ [key: string]: Style }, {}> {\n  formatProperty(property: string) {\n    return property.replace(/([a-zA-Z])(?=[A-Z])/g, \"$1-\").toLowerCase();\n  }\n\n  renderProperty(property: string, value: string | number, key: number) {\n    return (\n      <span key={key}>\n        &nbsp;&nbsp;\n        {this.formatProperty(property)}: {value}\n      </span>\n    );\n  }\n\n  renderTag(tag: string) {\n    const style: Style = this.props[tag];\n    const properties: string[] = Object.keys(style);\n\n    return (\n      <React.Fragment>\n        <span>{tag + \" {\"}</span>\n        {properties.map((p, i) => this.renderProperty(p, style[p], i))}\n        <span>{\" }\"}</span>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const tags: string[] = [\"h1\", \"p\"];\n\n    return tags.map((tag, i) => (\n      <div key={i} className={\"tag \" + tag}>\n        {this.renderTag(tag)}\n      </div>\n    ));\n  }\n}\n","import React from \"react\";\nimport { Style } from \"../interfaces\";\n\nexport class Paragraph extends React.Component<{ style: Style }, {}> {\n  render() {\n    return (\n      <div className=\"paragraph\">\n        <p style={{ ...this.props.style }}>\n          Pommy ipsum shepherd's pie full English breakast chips have a\n          butcher's at this therewith air one's dirty linen, unhand me sir Kate\n          and Will loo bugger driving a mini a cuppa. Alright geezer ever so bow\n          ties are cool have a gander yorkshire pudding give you a bell\n          slappers, picalilly Sonic Screwdriver at the boozer baffled see a man\n          about a dog flabbergasted, chin up bowler hat porky-pies River Song\n          got a lot of brass. Ey up bloody mary The Doctor black cab lass pork\n          dripping yorkshire mixture cotton on, in the jacksy bag egg's old boy\n          a cuppa shortbread spam fritters squirrel.\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Style } from \"../interfaces\";\n\nexport class H1 extends React.Component<{ style: Style }, {}> {\n  render() {\n    return (\n      <div className=\"h1\">\n        <h1 style={{ ...this.props.style }}>Ey up bloody mary</h1>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { Controls, Converter, H1, Paragraph } from \"./components\";\nimport { Style } from \"./interfaces\";\nimport \"./App.css\";\n\nexport default () => {\n  const [h1, setH1] = useState<Style>({ fontSize: 26, color: \"blue\" });\n  const [paragraph, setParagraph] = useState<Style>({\n    fontSize: 16,\n    color: \"green\"\n  });\n\n  return (\n    <div>\n      <Controls style={h1} handleChange={setH1} />\n      <H1 style={h1} />\n\n      <Controls style={paragraph} handleChange={setParagraph} />\n      <Paragraph style={paragraph} />\n\n      <Converter h1={h1} p={paragraph} />\n    </div>\n  );\n};\n"],"sourceRoot":""}