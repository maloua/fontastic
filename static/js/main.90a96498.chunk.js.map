{"version":3,"sources":["components/Controls.tsx","components/Paragraph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Controls","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","attr","event","props","handleChange","defineProperty","parseInt","target","_this","react_default","a","createElement","type","fontSize","onChange","e","React","Component","Paragraph","call","state","_this2","styles","className","Controls_Controls","assign","updatedValue","setState","style","App","Paragraph_Paragraph","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAOaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,eAAAC,MAAA,SACeC,EAAcC,GACzBV,KAAKW,MAAMC,aAAXd,OAAAe,EAAA,EAAAf,CAAA,GAA2BW,EAAOK,SAASJ,EAAMK,OAAOP,WAF5D,CAAAD,IAAA,SAAAC,MAAA,WAKW,IAAAQ,EAAAhB,KACP,OACEiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SACEC,KAAK,SACLZ,MAAOR,KAAKW,MAAMU,SAClBC,SAAU,SAACC,GAAD,OAAOP,EAAKJ,aAAa,WAAYW,WAZzD3B,EAAA,CAA8B4B,IAAMC,WCAvBC,EAAb,SAAA7B,GACE,SAAA6B,EAAYf,GAAY,IAAAK,EAAA,OAAAlB,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACtBV,EAAAlB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAC,KAAA3B,KAAMW,KAEDiB,MAAQ,CACXP,SAAU,IAJUL,EAD1B,OAAAlB,OAAAO,EAAA,EAAAP,CAAA4B,EAAA7B,GAAAC,OAAAQ,EAAA,EAAAR,CAAA4B,EAAA,EAAAnB,IAAA,SAAAC,MAAA,WASW,IAAAqB,EAAA7B,KACD8B,EAAS,CACbT,SAAUrB,KAAK4B,MAAMP,UAGvB,OACEJ,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACbd,EAAAC,EAAAC,cAACa,EAADlC,OAAAmC,OAAA,GACMjC,KAAK4B,MADX,CAEEhB,aAAc,SAAAsB,GAAY,OAAIL,EAAKM,SAASD,OAG9CjB,EAAAC,EAAAC,cAAA,KAAGiB,MAAON,GAAV,ilBArBRJ,EAAA,CAA+BF,IAAMC,WCOtBY,0LARX,OACEpB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAACmB,EAAD,cAJUd,IAAMC,YCQJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.90a96498.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  fontSize: number,\n  handleChange: ((value: object) => void)\n}\n\nexport class Controls extends React.Component<Props, {}> {\n  handleChange(attr: string, event: any) {\n    this.props.handleChange({ [attr]: parseInt(event.target.value) })\n  }\n\n  render() {\n    return (\n      <div>\n        <label>Size</label>\n        <input\n          type=\"number\"\n          value={this.props.fontSize}\n          onChange={(e) => this.handleChange('fontSize', e)}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Controls } from './Controls'\n\ninterface State {\n  fontSize: number\n}\n\nexport class Paragraph extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      fontSize: 16\n    }\n  }\n\n  render() {\n    const styles = {\n      fontSize: this.state.fontSize\n    }\n\n    return (\n      <div className=\"paragraph\">\n        <Controls\n          {...this.state}\n          handleChange={updatedValue => this.setState(updatedValue)}\n        />\n\n        <p style={styles}>\n          Pommy ipsum shepherd's pie full English breakast chips have a butcher's at this therewith air one's dirty linen, unhand me sir Kate and Will loo bugger driving a mini a cuppa. Alright geezer ever so bow ties are cool have a gander yorkshire pudding give you a bell slappers, picalilly Sonic Screwdriver at the boozer baffled see a man about a dog flabbergasted, chin up bowler hat porky-pies River Song got a lot of brass. Ey up bloody mary The Doctor black cab lass pork dripping yorkshire mixture cotton on, in the jacksy bag egg's old boy a cuppa shortbread spam fritters squirrel.\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Paragraph } from './components';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Paragraph />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}